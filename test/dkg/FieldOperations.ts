import {fieldOperationsTester} from "../testingFixtures";
import chai from "chai";

chai.should();

describe("FieldOperations", () => {
    describe("Math test", () => {
        it("should addG2 X + -X", async () => {
            const {fieldOperationsTester: fieldOperations} = await fieldOperationsTester();

            const x = {
                x: {
                    a: 17694137579193302151574986554989606791251275550473617358986030239522178978976n,
                    b: 12564968105536248672261459973073913897486530088026601007070081824732008005651n
                },
                y: {
                    a: 10077617338849750103014194401602674734647645994746679891913469903630044280365n,
                    b: 7900462855050398749824004124935262009825580193399121442342422552518111765590n
                }
            };
            const minusX = {
                x: {
                    a: 17694137579193302151574986554989606791251275550473617358986030239522178978976n,
                    b: 12564968105536248672261459973073913897486530088026601007070081824732008005651n
                },
                y: {
                    a: 11810625532989525119232211343654600354048665162551143770775567991015181928218n,
                    b: 13987780016788876472422401620322013078870730963898702220346615342127114442993n
                }
            };
            const res = await fieldOperations.addG2(x, minusX);
            res.x.a.should.be.equal(0n);
            res.x.b.should.be.equal(0n);
            res.y.a.should.be.equal(1n);
            res.y.b.should.be.equal(0n);
        });

        it("should addG2 X + -X from hacker", async () => {
            const {fieldOperationsTester: fieldOperations} = await fieldOperationsTester();

            const x = {
                x: {
                    a: 10857046999023057135944570762232829481370756359578518086990519993285655852781n,
                    b: 11559732032986387107991004021392285783925812861821192530917403151452391805634n
                },
                y: {
                    a: 13392588948715843804641432497768002650278120570034223513918757245338268106653n,
                    b: 17805874995975841540914202342111839520379459829704422454583296818431106115052n
                }
            };
            const minusX = {
                x: {
                    a: 10857046999023057135944570762232829481370756359578518086990519993285655852781n,
                    b: 11559732032986387107991004021392285783925812861821192530917403151452391805634n
                },
                y: {
                    a: 8495653923123431417604973247489272438418190587263600148770280649306958101930n,
                    b: 4082367875863433681332203403145435568316851327593401208105741076214120093531n
                }
            };
            const res = await fieldOperations.addG2(x, minusX);
            res.x.a.should.be.equal(0n);
            res.x.b.should.be.equal(0n);
            res.y.a.should.be.equal(1n);
            res.y.b.should.be.equal(0n);
        });
    });
});
